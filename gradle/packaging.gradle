import java.text.SimpleDateFormat

// Resolve properties during configuration
def mainClassName = project.findProperty('mainClass') ?: 'io.github.astrapi69.swing.app.StartApplication'
def createIzPackInstallerStringProperty = project.findProperty('createIzPackInstaller') ?: 'false'
def createIzPackInstaller = createIzPackInstallerStringProperty.toBoolean()
def releaseVersion = !version.endsWith("SNAPSHOT")
def buildDirectory = layout.buildDirectory.get().asFile
def buildJdk = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
def buildOs = "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"

jar {
    manifest {
        attributes(
                "Name": project.name,
                "Manifest-Version": project.version,
                "Main-Class": mainClassName,
                "Implementation-Title": "$groupPackage" + "." + "$rootProject.name",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "$projectLeaderName",
                "Created-By": "Gradle ${gradle.gradleVersion}",
                "Built-By": "$projectLeaderName",
                "Build-Timestamp": new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                "Build-Jdk"             : buildJdk,
                "Build-OS"              : buildOs
        )
    }
}
// Task to create jar with all dependencies
tasks.register("withAllDependendiesJar", Jar) {
    // Ensure the `build` task runs before this task
    dependsOn build
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest.from jar.manifest
    archiveClassifier.set("all")
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude("META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA")
    with jar
}

tasks.register("signJar", Jar) {
    mustRunAfter(withAllDependendiesJar)
    if (releaseVersion || createIzPackInstaller) {
        def pkAlias = project.property("$silentMouseKeyAlias")
        def keystoreFileName = project.property("$silentMouseStoreFile")
        def storePassword = project.property("$silentMouseStorePassword")
        def keyPassword = project.property("$silentMouseKeyPassword")
        def keystoreType = project.property("$silentMouseStoreType")
        def libsFilePath = "$buildDirectory/libs"
        def libFiles = files { file(libsFilePath).listFiles() }
        def destDir = "$buildDirectory/signed"
        def signedDir = new File(destDir)
        signedDir.mkdirs()
        libFiles.each {
            ant.signjar(
                    jar: it,
                    destDir: "$destDir",
                    alias: "$pkAlias",
                    storetype: "$keystoreType",
                    keystore: "$keystoreFileName",
                    storepass: "$storePassword",
                    keypass: "$keyPassword",
                    verbose: true,
                    preservelastmodified: "true"
            )
        }
    } else {
        println('Created jar file is not signed.\n' +
                'IzPackInstaller can not be created because it depends on signed jar.')
    }
}

// Helper method to handle JAR signing logic
void signJarsWithAnt(File libsFilePath, File destDir, String pkAlias, String keystoreFileName, String storePassword, String keyPassword, String keystoreType) {
    def libFiles = libsFilePath.listFiles()
    destDir.mkdirs()
    libFiles.each { file ->
        println("Processing JAR: ${file.name}")
        println(" - Absolute path: ${file.absolutePath}")
        println(" - File size: ${file.length()} bytes")
        ant.signjar(
                jar: file,
                destDir: destDir,
                alias: pkAlias,
                storetype: keystoreType,
                keystore: keystoreFileName,
                storepass: storePassword,
                keypass: keyPassword,
                verbose: true,
                preservelastmodified: true
        )
        println("Signed JAR saved to: ${new File(destDir, file.name).absolutePath}")
    }
}
